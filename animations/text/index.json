[
    {
        "id": "professional-text-highlight",
        "title": "Professional Text Highlight",
        "description": "Corporate-style text highlighting animation with polished transitions and precise timing.",
        "category": "text",
        "tags": ["text", "highlight", "professional", "corporate"],
        "html": "<div class=\"corp-highlight-container\">\n  <h2 class=\"corp-highlight-heading\">\n    Delivering <span class=\"corp-highlight\">innovative</span> solutions for enterprise clients\n  </h2>\n</div>",
        "css": ".corp-highlight-container {\n  font-family: 'Inter', sans-serif;\n  padding: 2.5rem 2rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: linear-gradient(to right, #f8f9fa, #f5f7fa);\n  border-radius: 8px;\n}\n\n.corp-highlight-heading {\n  font-size: 1.75rem;\n  font-weight: 600;\n  line-height: 1.4;\n  color: #2c3e50;\n  text-align: center;\n  max-width: 600px;\n  margin: 0;\n  letter-spacing: -0.01em;\n}\n\n.corp-highlight {\n  position: relative;\n  display: inline-block;\n  color: #2563eb;\n  font-weight: 700;\n  z-index: 1;\n  transition: color 0.3s ease;\n}\n\n.corp-highlight::before {\n  content: '';\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 30%;\n  background-color: rgba(37, 99, 235, 0.12);\n  z-index: -1;\n  transform: scaleX(0.3) translateY(0);\n  opacity: 0;\n  transform-origin: left;\n  transition: transform 0.6s cubic-bezier(0.19, 1, 0.22, 1), \n              opacity 0.6s ease, \n              height 0.6s ease;\n}\n\n.corp-highlight-container:hover .corp-highlight::before {\n  transform: scaleX(1) translateY(0);\n  height: 30%;\n  opacity: 1;\n}\n\n.corp-highlight::after {\n  content: '';\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 2px;\n  background-color: #2563eb;\n  transform: scaleX(0);\n  transform-origin: left;\n  transition: transform 0.4s ease;\n}\n\n.corp-highlight-container:hover .corp-highlight::after {\n  transform: scaleX(1);\n  transition-delay: 0.2s;\n}",
        "js": "// Add animation to the professional text highlight\nconst container = this.querySelector('.corp-highlight-container');\nconst highlight = this.querySelector('.corp-highlight');\n\nif (container && highlight) {\n  // Initial state animation setup\n  highlight.style.opacity = '0.9';\n  highlight.style.transform = 'translateY(2px)';\n  highlight.style.transition = 'opacity 0.5s ease, transform 0.5s ease, color 0.3s ease';\n  \n  // Create a subtle glow effect\n  const glow = document.createElement('div');\n  glow.className = 'highlight-glow';\n  glow.style.cssText = `\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 0;\n    background: radial-gradient(ellipse at center, rgba(37, 99, 235, 0.2) 0%, rgba(37, 99, 235, 0) 70%);\n    z-index: -2;\n    opacity: 0;\n    transform: translateY(5px);\n    transition: opacity 0.6s ease, transform 0.6s ease, height 0.6s ease;\n  `;\n  \n  highlight.appendChild(glow);\n  \n  // Animate in with slight delay\n  setTimeout(() => {\n    highlight.style.opacity = '1';\n    highlight.style.transform = 'translateY(0)';\n  }, 300);\n  \n  // Add hover interaction\n  container.addEventListener('mouseenter', () => {\n    glow.style.opacity = '1';\n    glow.style.height = '100%';\n    glow.style.transform = 'translateY(0px)';\n  });\n  \n  container.addEventListener('mouseleave', () => {\n    glow.style.opacity = '0';\n    glow.style.height = '0';\n    glow.style.transform = 'translateY(5px)';\n  });\n  \n  // Add subtle animation when the highlight is clicked\n  highlight.addEventListener('click', () => {\n    highlight.style.color = '#1d4ed8';\n    \n    const before = window.getComputedStyle(\n      highlight, '::before'\n    );\n    \n    // Animation effect - create a pulse\n    highlight.style.transform = 'scale(1.05)';\n    setTimeout(() => {\n      highlight.style.transform = 'scale(1)';\n    }, 200);\n    \n    // Reset color after delay\n    setTimeout(() => {\n      highlight.style.color = '#2563eb';\n    }, 500);\n  });\n}"
    },
    {
        "id": "corporate-text-typing",
        "title": "Corporate Text Typing Effect",
        "description": "Professional typing animation with cursor effect, ideal for corporate websites and presentations.",
        "category": "text",
        "tags": ["text", "typing", "professional", "corporate"],
        "html": "<div class=\"corporate-typing-container\">\n  <div class=\"corporate-typing-wrapper\">\n    <span class=\"corporate-typing-prefix\">We specialize in</span>\n    <div class=\"corporate-typing-text\">\n      <span class=\"typing-item\">Web Development</span>\n      <span class=\"typing-item\">UI/UX Design</span>\n      <span class=\"typing-item\">Digital Marketing</span>\n      <span class=\"typing-item\">Brand Strategy</span>\n    </div>\n    <span class=\"corporate-typing-cursor\">|</span>\n  </div>\n</div>",
        "css": ".corporate-typing-container {\n  font-family: 'Inter', sans-serif;\n  padding: 2rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: linear-gradient(to right, #f8f9fa, #f1f3f5);\n  border-radius: 8px;\n}\n\n.corporate-typing-wrapper {\n  display: flex;\n  align-items: center;\n  font-size: 1.6rem;\n  font-weight: 500;\n  color: #333;\n  height: 50px;\n}\n\n.corporate-typing-prefix {\n  margin-right: 10px;\n  color: #555;\n}\n\n.corporate-typing-text {\n  position: relative;\n  display: inline-block;\n  font-weight: 700;\n  color: #1976D2;\n  overflow: hidden;\n  height: 1.5em;\n  min-width: 270px;\n}\n\n.typing-item {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  opacity: 0;\n  animation: typing-rotate 8s linear infinite 0s;\n  overflow: hidden;\n  white-space: nowrap;\n}\n\n.typing-item:nth-child(2) {\n  animation-delay: 2s;\n}\n\n.typing-item:nth-child(3) {\n  animation-delay: 4s;\n}\n\n.typing-item:nth-child(4) {\n  animation-delay: 6s;\n}\n\n@keyframes typing-rotate {\n  0%, 20%, 100% {\n    transform: translateY(100%);\n    opacity: 0;\n  }\n  3%, 17% {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n.corporate-typing-cursor {\n  font-weight: 400;\n  color: #1976D2;\n  animation: cursor-blink 1s infinite;\n  margin-left: 3px;\n}\n\n@keyframes cursor-blink {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0; }\n}",
        "js": "// Enhance the typing animation with dynamic content if needed\nconst container = this.querySelector('.corporate-typing-container');\nconst textElements = this.querySelectorAll('.typing-item');\n\nif (container && textElements.length) {\n  // Add a subtle entrance animation\n  container.style.opacity = '0';\n  container.style.transform = 'translateY(20px)';\n  container.style.transition = 'opacity 0.8s ease, transform 0.8s ease';\n  \n  setTimeout(() => {\n    container.style.opacity = '1';\n    container.style.transform = 'translateY(0)';\n  }, 300);\n  \n  // Calculate optimal width for text container\n  const textContainer = this.querySelector('.corporate-typing-text');\n  if (textContainer) {\n    let maxWidth = 0;\n    \n    // Find the widest text element\n    textElements.forEach(el => {\n      const tempSpan = document.createElement('span');\n      tempSpan.style.visibility = 'hidden';\n      tempSpan.style.position = 'absolute';\n      tempSpan.style.fontSize = '1.6rem';\n      tempSpan.style.fontWeight = '700';\n      tempSpan.textContent = el.textContent;\n      document.body.appendChild(tempSpan);\n      \n      const width = tempSpan.offsetWidth;\n      if (width > maxWidth) {\n        maxWidth = width;\n      }\n      \n      document.body.removeChild(tempSpan);\n    });\n    \n    // Set minimum width to fit the longest text\n    if (maxWidth > 0) {\n      textContainer.style.minWidth = `${maxWidth + 20}px`;\n    }\n  }\n}"
    },
    {
        "id": "text-reveal",
        "title": "Text Reveal Animation",
        "description": "Text is revealed character by character for a dramatic typewriter effect.",
        "category": "text",
        "tags": ["text", "typewriter", "reveal"],
        "html": "<h2 class=\"text-reveal\">Watch me reveal one letter at a time...</h2>",
        "css": ".text-reveal {\n  font-family: 'Poppins', sans-serif;\n  font-size: 1.8rem;\n  font-weight: 600;\n  color: #333;\n  overflow: hidden;\n  white-space: nowrap;\n  margin: 0 auto;\n  letter-spacing: 0.05em;\n  border-right: 3px solid #7c4dff;\n  animation: typing 3.5s steps(40, end), blink-caret 0.75s step-end infinite;\n}\n\n@keyframes typing {\n  from { width: 0 }\n  to { width: 100% }\n}\n\n@keyframes blink-caret {\n  from, to { border-color: transparent }\n  50% { border-color: #7c4dff }\n}",
        "js": ""
    },
    {
        "id": "wave-text",
        "title": "Wave Text Animation",
        "description": "Text characters animate in a wave-like motion for an eye-catching effect.",
        "category": "text",
        "tags": ["text", "wave", "animation"],
        "html": "<h2 class=\"wave-text\">Wave Animation</h2>",
        "css": ".wave-text {\n  font-family: 'Poppins', sans-serif;\n  font-size: 2rem;\n  font-weight: 700;\n  color: #7c4dff;\n}\n\n.wave-text span {\n  display: inline-block;\n  animation: wave 2s infinite;\n  animation-delay: calc(0.1s * var(--i));\n}\n\n@keyframes wave {\n  0%, 40%, 100% {\n    transform: translateY(0);\n  }\n  20% {\n    transform: translateY(-15px);\n  }\n}",
        "js": "const waveText = document.querySelector('.wave-text');\nlet text = waveText.textContent;\nwaveText.innerHTML = '';\n\nfor (let i = 0; i < text.length; i++) {\n  if (text[i] === ' ') {\n    waveText.innerHTML += ' ';\n  } else {\n    waveText.innerHTML += `<span style=\"--i:${i}\">${text[i]}</span>`;\n  }\n}"
    },
    {
        "id": "text-scramble",
        "title": "Text Scrambler",
        "description": "Text that scrambles and unscrambles with a futuristic effect.",
        "category": "text",
        "tags": ["text", "scramble", "futuristic"],
        "html": "<div class=\"scramble-container\">\n  <h2 class=\"scramble-text\">AnimX Text Scrambler</h2>\n  <button id=\"replay-scramble\" class=\"replay-btn\">Replay Animation</button>\n</div>",
        "css": ".scramble-container {\n  text-align: center;\n  padding: 2rem;\n}\n\n.scramble-text {\n  font-size: 2.5rem;\n  font-weight: 700;\n  color: #7c4dff;\n  margin-bottom: 1.5rem;\n}\n\n.replay-btn {\n  padding: 0.7rem 1.5rem;\n  background-color: #7c4dff;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: background-color 0.3s;\n}\n\n.replay-btn:hover {\n  background-color: #6436db;\n}",
        "js": "// Text Scrambler\nclass TextScrambler {\n  constructor(el) {\n    this.el = el;\n    this.chars = '!<>-_\\\\|/[]{}—=+*^?#_____';\n    this.update = this.update.bind(this);\n  }\n  \n  setText(newText) {\n    const oldText = this.el.innerText;\n    const length = Math.max(oldText.length, newText.length);\n    const promise = new Promise(resolve => this.resolve = resolve);\n    this.queue = [];\n    \n    for (let i = 0; i < length; i++) {\n      const from = oldText[i] || '';\n      const to = newText[i] || '';\n      const start = Math.floor(Math.random() * 40);\n      const end = start + Math.floor(Math.random() * 40);\n      this.queue.push({ from, to, start, end });\n    }\n    \n    cancelAnimationFrame(this.frameRequest);\n    this.frame = 0;\n    this.update();\n    return promise;\n  }\n  \n  update() {\n    let output = '';\n    let complete = 0;\n    \n    for (let i = 0, n = this.queue.length; i < n; i++) {\n      let { from, to, start, end, char } = this.queue[i];\n      \n      if (this.frame >= end) {\n        complete++;\n        output += to;\n      } else if (this.frame >= start) {\n        if (!char || Math.random() < 0.28) {\n          char = this.randomChar();\n          this.queue[i].char = char;\n        }\n        output += char;\n      } else {\n        output += from;\n      }\n    }\n    \n    this.el.innerText = output;\n    \n    if (complete === this.queue.length) {\n      this.resolve();\n    } else {\n      this.frameRequest = requestAnimationFrame(this.update);\n      this.frame++;\n    }\n  }\n  \n  randomChar() {\n    return this.chars[Math.floor(Math.random() * this.chars.length)];\n  }\n}\n\nfunction initScrambler() {\n  const el = document.querySelector('.scramble-text');\n  if (!el) return;\n  \n  const fx = new TextScrambler(el);\n  \n  const scrambleText = () => {\n    fx.setText('AnimX Text Scrambler').then(() => {\n      setTimeout(scrambleText, 4000);\n    });\n  };\n  \n  scrambleText();\n  \n  // Add replay button functionality\n  const replayBtn = document.getElementById('replay-scramble');\n  if (replayBtn) {\n    replayBtn.addEventListener('click', () => {\n      fx.setText('AnimX Text Scrambler');\n    });\n  }\n}\n\ninitScrambler();"
    },
    {
        "id": "gradient-text-animation",
        "title": "Animated Gradient Text",
        "description": "Text with a stunning gradient color animation that continuously shifts through a spectrum of vibrant colors.",
        "category": "text",
        "tags": ["text", "gradient", "colors", "vibrant"],
        "html": "<h2 class=\"gradient-text\">Animated Gradient</h2>",
        "css": ".gradient-text {\n  font-size: 3.5rem;\n  font-weight: 900;\n  text-align: center;\n  background-image: linear-gradient(90deg, #7c4dff, #ff4d7c, #4dcaff, #4dffcb, #7c4dff);\n  background-size: 400% 100%;\n  background-clip: text;\n  -webkit-background-clip: text;\n  color: transparent;\n  animation: gradient-shift 8s linear infinite;\n}\n\n@keyframes gradient-shift {\n  0% {\n    background-position: 0% 50%;\n  }\n  100% {\n    background-position: 400% 50%;\n  }\n}",
        "js": ""
    },
    {
        "id": "3d-text-rotation",
        "title": "3D Text Rotation",
        "description": "Text that rotates in 3D space with smooth transitions and perspective shifts.",
        "category": "text",
        "tags": ["text", "3d", "rotation", "perspective"],
        "html": "<div class=\"text-3d-container\">\n  <div class=\"text-3d\">\n    <span class=\"face front\">Front</span>\n    <span class=\"face back\">Back</span>\n    <span class=\"face right\">Right</span>\n    <span class=\"face left\">Left</span>\n    <span class=\"face top\">Top</span>\n    <span class=\"face bottom\">Bottom</span>\n  </div>\n</div>",
        "css": ".text-3d-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 200px;\n  perspective: 1000px;\n}\n\n.text-3d {\n  position: relative;\n  width: 200px;\n  height: 200px;\n  transform-style: preserve-3d;\n  animation: rotate3d 10s infinite linear;\n}\n\n.face {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2.5rem;\n  font-weight: 800;\n  backface-visibility: hidden;\n  color: white;\n  text-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n}\n\n.front {\n  transform: translateZ(100px);\n  background-color: rgba(124, 77, 255, 0.8);\n}\n\n.back {\n  transform: rotateY(180deg) translateZ(100px);\n  background-color: rgba(255, 77, 124, 0.8);\n}\n\n.right {\n  transform: rotateY(90deg) translateZ(100px);\n  background-color: rgba(77, 202, 255, 0.8);\n}\n\n.left {\n  transform: rotateY(-90deg) translateZ(100px);\n  background-color: rgba(255, 202, 77, 0.8);\n}\n\n.top {\n  transform: rotateX(90deg) translateZ(100px);\n  background-color: rgba(77, 255, 107, 0.8);\n}\n\n.bottom {\n  transform: rotateX(-90deg) translateZ(100px);\n  background-color: rgba(255, 77, 249, 0.8);\n}\n\n@keyframes rotate3d {\n  0% {\n    transform: rotateX(0deg) rotateY(0deg);\n  }\n  100% {\n    transform: rotateX(360deg) rotateY(360deg);\n  }\n}",
        "js": ""
    },
    {
        "id": "glitch-text-effect",
        "title": "Glitch Text Effect",
        "description": "A distorted glitch effect for text that creates a digital malfunction aesthetic, perfect for cyberpunk or tech themes.",
        "category": "text",
        "tags": ["text", "glitch", "distortion", "cyberpunk"],
        "html": "<h2 class=\"glitch-text\" data-text=\"Glitch Effect\">Glitch Effect</h2>",
        "css": ".glitch-text {\n  position: relative;\n  font-size: 4rem;\n  font-weight: 800;\n  color: white;\n  text-shadow: 0.05em 0 0 rgba(255, 0, 0, 0.75),\n              -0.025em -0.05em 0 rgba(0, 255, 0, 0.75),\n              0.025em 0.05em 0 rgba(0, 0, 255, 0.75);\n  animation: glitch 2s infinite;\n}\n\n.glitch-text::before,\n.glitch-text::after {\n  content: attr(data-text);\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  opacity: 0.8;\n}\n\n.glitch-text::before {\n  animation: glitch-effect 2s infinite;\n  clip-path: polygon(0 0, 100% 0, 100% 35%, 0 35%);\n  transform: translate(-0.04em, -0.025em);\n  opacity: 0.75;\n  color: rgb(249, 16, 145);\n}\n\n.glitch-text::after {\n  animation: glitch-effect 2.5s infinite reverse;\n  clip-path: polygon(0 65%, 100% 65%, 100% 100%, 0 100%);\n  transform: translate(0.04em, 0.025em);\n  opacity: 0.75;\n  color: rgb(27, 194, 246);\n}\n\n@keyframes glitch-effect {\n  0% {\n    transform: translate(0);\n  }\n  10% {\n    transform: translate(-5px, 5px);\n  }\n  20% {\n    transform: translate(-5px, -5px);\n  }\n  30% {\n    transform: translate(5px, 5px);\n  }\n  40% {\n    transform: translate(5px, -5px);\n  }\n  50% {\n    transform: translate(-5px, 5px);\n  }\n  60% {\n    transform: translate(5px, 5px);\n  }\n  70% {\n    transform: translate(-5px, -5px);\n  }\n  80% {\n    transform: translate(-5px, 5px);\n  }\n  90% {\n    transform: translate(5px, -5px);\n  }\n  100% {\n    transform: translate(0);\n  }\n}\n\n@keyframes glitch {\n  1% {\n    transform: rotateX(10deg) skewX(90deg);\n  }\n  2% {\n    transform: rotateX(0deg) skewX(0deg);\n  }\n  40% {\n    transform: rotateX(0deg) skewX(0deg);\n  }\n  41% {\n    transform: rotateX(10deg) skewX(-90deg);\n  }\n  42% {\n    transform: rotateX(0deg) skewX(0deg);\n  }\n  100% {\n    transform: rotateX(0deg) skewX(0deg);\n  }\n}",
        "js": ""
    },
    {
        "id": "perspective-text-reveal",
        "title": "Perspective Text Reveal",
        "description": "A stunning 3D perspective reveal effect where text unfolds in 3D space with smooth transitions and depth.",
        "category": "text",
        "tags": ["text", "3d", "perspective", "reveal", "transition"],
        "html": "<div class=\"perspective-container\">\n  <div class=\"perspective-wrapper\">\n    <div class=\"perspective-text\">\n      <p>Stunning</p>\n      <p>Perspective</p>\n      <p>Text</p>\n      <p>Animation</p>\n      <p>Effect</p>\n    </div>\n  </div>\n</div>",
        "css": ".perspective-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 300px;\n  background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);\n  border-radius: 12px;\n  perspective: 1000px;\n  overflow: hidden;\n}\n\n.perspective-wrapper {\n  transform-style: preserve-3d;\n  perspective: 1000px;\n  position: relative;\n  height: 60px;\n  overflow: hidden;\n}\n\n.perspective-text {\n  position: relative;\n  animation: rotateText 8s ease infinite;\n  transform-style: preserve-3d;\n}\n\n.perspective-text p {\n  margin: 0;\n  height: 60px;\n  line-height: 60px;\n  font-size: 3rem;\n  font-weight: 800;\n  color: transparent;\n  background: linear-gradient(45deg, #7c4dff, #4dcaff);\n  -webkit-background-clip: text;\n  background-clip: text;\n  text-align: center;\n  text-transform: uppercase;\n  text-shadow: 0 5px 15px rgba(124, 77, 255, 0.3);\n  position: relative;\n  transform-origin: center center -30px;\n  transform-style: preserve-3d;\n  transform: rotateX(-90deg) translateY(-30px);\n  animation: rollIn 1.5s ease-in-out infinite;\n  animation-play-state: paused;\n  letter-spacing: 2px;\n}\n\n/* Apply animation to each paragraph with delay */\n.perspective-text p:nth-child(1) {\n  animation-delay: 0s;\n  animation-play-state: running;\n}\n\n.perspective-text p:nth-child(2) {\n  animation-delay: 1.5s;\n  animation-play-state: running;\n}\n\n.perspective-text p:nth-child(3) {\n  animation-delay: 3s;\n  animation-play-state: running;\n}\n\n.perspective-text p:nth-child(4) {\n  animation-delay: 4.5s;\n  animation-play-state: running;\n}\n\n.perspective-text p:nth-child(5) {\n  animation-delay: 6s;\n  animation-play-state: running;\n}\n\n@keyframes rotateText {\n  0%, 15% { transform: translateZ(0) rotateX(0); }\n  20%, 35% { transform: translateZ(0) rotateX(-90deg); }\n  40%, 55% { transform: translateZ(0) rotateX(-180deg); }\n  60%, 75% { transform: translateZ(0) rotateX(-270deg); }\n  80%, 95% { transform: translateZ(0) rotateX(-360deg); }\n  100% { transform: translateZ(0) rotateX(-360deg); }\n}\n\n@keyframes rollIn {\n  0% {\n    transform: rotateX(-90deg) translateY(-30px);\n    opacity: 0;\n  }\n  20% {\n    transform: rotateX(0deg) translateY(0);\n    opacity: 1;\n  }\n  70% {\n    transform: rotateX(0deg) translateY(0);\n    opacity: 1;\n  }\n  100% {\n    transform: rotateX(90deg) translateY(30px);\n    opacity: 0;\n  }\n}\n\n/* Add light reflection */\n.perspective-text p::after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, \n    transparent 0%, \n    rgba(255, 255, 255, 0.1) 45%, \n    rgba(255, 255, 255, 0.4) 50%, \n    rgba(255, 255, 255, 0.1) 55%, \n    transparent 100%);\n  transform: translateX(-100%);\n  animation: lightSweep 3s ease-in-out infinite;\n  animation-play-state: paused;\n}\n\n.perspective-text p:nth-child(1)::after { animation-delay: 0.5s; animation-play-state: running; }\n.perspective-text p:nth-child(2)::after { animation-delay: 2s; animation-play-state: running; }\n.perspective-text p:nth-child(3)::after { animation-delay: 3.5s; animation-play-state: running; }\n.perspective-text p:nth-child(4)::after { animation-delay: 5s; animation-play-state: running; }\n.perspective-text p:nth-child(5)::after { animation-delay: 6.5s; animation-play-state: running; }\n\n@keyframes lightSweep {\n  0% { transform: translateX(-100%); }\n  100% { transform: translateX(100%); }\n}",
        "js": "function initPerspectiveText() {\n  const container = document.querySelector('.perspective-container');\n  \n  if (!container) return;\n  \n  // Add depth and tilt effect on mouse move\n  container.addEventListener('mousemove', (e) => {\n    const wrapper = document.querySelector('.perspective-wrapper');\n    if (!wrapper) return;\n    \n    const rect = container.getBoundingClientRect();\n    const centerX = rect.left + rect.width / 2;\n    const centerY = rect.top + rect.height / 2;\n    \n    // Calculate mouse position relative to center\n    const mouseX = e.clientX - centerX;\n    const mouseY = e.clientY - centerY;\n    \n    // Calculate rotation angle\n    const rotateX = mouseY * -0.03;\n    const rotateY = mouseX * 0.03;\n    \n    // Apply transformation\n    wrapper.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;\n    \n    // Add depth effect to text\n    const textElements = document.querySelectorAll('.perspective-text p');\n    textElements.forEach((text, index) => {\n      const z = (index + 1) * 5;\n      const scale = 1 + (index * 0.05);\n      text.style.transform = `rotateX(-90deg) translateY(-30px) translateZ(${z}px) scale(${scale})`;\n    });\n  });\n  \n  // Reset on mouse leave\n  container.addEventListener('mouseleave', () => {\n    const wrapper = document.querySelector('.perspective-wrapper');\n    if (!wrapper) return;\n    \n    wrapper.style.transform = '';\n    \n    const textElements = document.querySelectorAll('.perspective-text p');\n    textElements.forEach(text => {\n      text.style.transform = '';\n    });\n  });\n}\n\n// Initialize perspective text\ninitPerspectiveText();"
    }
] 