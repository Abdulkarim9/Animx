[
    {
        "id": "professional-circular-progress",
        "title": "Professional Circular Progress",
        "description": "Modern, professional circular loading animation with precise animation and clean design for enterprise applications.",
        "category": "loaders",
        "tags": ["loader", "circular", "professional", "progress"],
        "html": "<div class=\"pro-circular-container\">\n  <div class=\"pro-circular-loader\">\n    <svg class=\"pro-circular-svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n      <circle class=\"pro-circular-bg\" cx=\"50\" cy=\"50\" r=\"45\"></circle>\n      <circle class=\"pro-circular-progress\" cx=\"50\" cy=\"50\" r=\"45\"></circle>\n    </svg>\n    <div class=\"pro-circular-label\">\n      <span class=\"pro-circular-percent\">0</span><span>%</span>\n    </div>\n  </div>\n</div>",
        "css": ".pro-circular-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 200px;\n}\n\n.pro-circular-loader {\n  position: relative;\n  width: 120px;\n  height: 120px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.pro-circular-svg {\n  width: 100%;\n  height: 100%;\n  transform: rotate(-90deg);\n}\n\n.pro-circular-bg {\n  fill: none;\n  stroke: #f0f0f0;\n  stroke-width: 4;\n}\n\n.pro-circular-progress {\n  fill: none;\n  stroke: #0078d4;\n  stroke-width: 4;\n  stroke-dasharray: 283;\n  stroke-dashoffset: 283;\n  stroke-linecap: round;\n  filter: drop-shadow(0 0 2px rgba(0, 120, 212, 0.5));\n  transition: stroke-dashoffset 0.5s ease;\n}\n\n.pro-circular-label {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  font-family: 'Inter', sans-serif;\n  font-size: 1.5rem;\n  font-weight: 500;\n  color: #333;\n  display: flex;\n  align-items: baseline;\n}\n\n.pro-circular-percent {\n  font-size: 1.5rem;\n  font-weight: 600;\n}\n\n.pro-circular-label span:last-child {\n  font-size: 1rem;\n  margin-left: 2px;\n  opacity: 0.8;\n}",
        "js": "// Initialize the professional circular progress loader\nconst container = this.querySelector('.pro-circular-container');\nconst progressCircle = this.querySelector('.pro-circular-progress');\nconst percentText = this.querySelector('.pro-circular-percent');\n\nif (progressCircle && percentText) {\n  // Calculate the circumference of the circle\n  const radius = progressCircle.getAttribute('r');\n  const circumference = 2 * Math.PI * radius;\n  \n  // Set the initial dash array to match the circumference\n  progressCircle.style.strokeDasharray = `${circumference}`;\n  progressCircle.style.strokeDashoffset = `${circumference}`;\n  \n  let currentPercent = 0;\n  const targetPercent = 75; // The target percentage to animate to\n  \n  // Function to update the progress\n  const updateProgress = (percent) => {\n    const offset = circumference - (percent / 100) * circumference;\n    progressCircle.style.strokeDashoffset = offset;\n    percentText.textContent = Math.round(percent);\n  };\n  \n  // Animate the progress\n  const animateProgress = () => {\n    if (currentPercent < targetPercent) {\n      currentPercent += 1;\n      updateProgress(currentPercent);\n      \n      // Slow down the animation as it progresses\n      const delay = currentPercent < 50 ? 20 : 30;\n      setTimeout(animateProgress, delay);\n    }\n  };\n  \n  // Start with a slight delay\n  setTimeout(animateProgress, 300);\n  \n  // Add interactive hover effect\n  container.addEventListener('mouseenter', () => {\n    progressCircle.style.transition = 'stroke-dashoffset 0.8s ease, stroke 0.3s ease';\n    progressCircle.style.stroke = '#2b88d8';\n  });\n  \n  container.addEventListener('mouseleave', () => {\n    progressCircle.style.stroke = '#0078d4';\n  });\n}"
    },
    {
        "id": "corporate-skeleton-loader",
        "title": "Corporate Skeleton Loader",
        "description": "Professional skeleton loading animation designed for corporate dashboards and enterprise applications.",
        "category": "loaders",
        "tags": ["loader", "skeleton", "professional", "corporate"],
        "html": "<div class=\"skeleton-loader-container\">\n  <div class=\"skeleton-header\">\n    <div class=\"skeleton-avatar\"></div>\n    <div class=\"skeleton-lines\">\n      <div class=\"skeleton-line skeleton-title\"></div>\n      <div class=\"skeleton-line skeleton-subtitle\"></div>\n    </div>\n  </div>\n  <div class=\"skeleton-content\">\n    <div class=\"skeleton-paragraph\">\n      <div class=\"skeleton-line\"></div>\n      <div class=\"skeleton-line\"></div>\n      <div class=\"skeleton-line\"></div>\n      <div class=\"skeleton-line skeleton-line-short\"></div>\n    </div>\n    <div class=\"skeleton-data\">\n      <div class=\"skeleton-chart\"></div>\n      <div class=\"skeleton-stats\">\n        <div class=\"skeleton-stat-item\"></div>\n        <div class=\"skeleton-stat-item\"></div>\n      </div>\n    </div>\n  </div>\n</div>",
        "css": ".skeleton-loader-container {\n  width: 100%;\n  max-width: 600px;\n  padding: 24px;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\n  overflow: hidden;\n  position: relative;\n  font-family: 'Inter', sans-serif;\n}\n\n.skeleton-loader-container::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, \n    rgba(255, 255, 255, 0) 0%, \n    rgba(255, 255, 255, 0.6) 50%, \n    rgba(255, 255, 255, 0) 100%);\n  animation: skeleton-loading 1.5s infinite;\n  z-index: 10;\n}\n\n.skeleton-header {\n  display: flex;\n  align-items: center;\n  margin-bottom: 24px;\n}\n\n.skeleton-avatar {\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  background: #f0f2f5;\n  margin-right: 16px;\n  flex-shrink: 0;\n}\n\n.skeleton-lines {\n  flex-grow: 1;\n}\n\n.skeleton-line {\n  height: 12px;\n  background: #f0f2f5;\n  border-radius: 4px;\n  margin-bottom: 8px;\n}\n\n.skeleton-line:last-child {\n  margin-bottom: 0;\n}\n\n.skeleton-title {\n  height: 16px;\n  width: 60%;\n}\n\n.skeleton-subtitle {\n  width: 40%;\n  height: 12px;\n}\n\n.skeleton-paragraph {\n  margin-bottom: 24px;\n}\n\n.skeleton-line-short {\n  width: 80%;\n}\n\n.skeleton-data {\n  display: flex;\n  align-items: center;\n}\n\n.skeleton-chart {\n  width: 60%;\n  height: 120px;\n  background: #f0f2f5;\n  border-radius: 8px;\n  margin-right: 16px;\n}\n\n.skeleton-stats {\n  width: 40%;\n}\n\n.skeleton-stat-item {\n  height: 50px;\n  background: #f0f2f5;\n  border-radius: 6px;\n  margin-bottom: 16px;\n}\n\n.skeleton-stat-item:last-child {\n  margin-bottom: 0;\n}\n\n@keyframes skeleton-loading {\n  0% {\n    transform: translateX(-100%);\n  }\n  100% {\n    transform: translateX(100%);\n  }\n}",
        "js": "// Add enhanced shimmer effect to skeleton loader\nconst container = this.querySelector('.skeleton-loader-container');\nconst skeletonElements = this.querySelectorAll('.skeleton-line, .skeleton-avatar, .skeleton-chart, .skeleton-stat-item');\n\nif (container && skeletonElements.length) {\n  // Add subtle entrance animation\n  container.style.opacity = '0';\n  container.style.transform = 'translateY(10px)';\n  container.style.transition = 'opacity 0.4s ease, transform 0.4s ease';\n  \n  setTimeout(() => {\n    container.style.opacity = '1';\n    container.style.transform = 'translateY(0)';\n  }, 100);\n  \n  // Add varying opacities to skeleton elements for a more dynamic look\n  skeletonElements.forEach((element, index) => {\n    // Vary the background color slightly\n    const hue = (index % 3) * 2;\n    const lightness = 95 - (index % 2);\n    element.style.background = `hsl(220, 10%, ${lightness}%)`;\n    \n    // Add subtle scale animation to some elements\n    if (index % 3 === 0) {\n      element.style.animation = `skeleton-pulse 2s infinite ease-in-out ${index * 0.1}s`;\n    }\n  });\n  \n  // Add keyframes for pulse animation\n  const style = document.createElement('style');\n  style.textContent = `\n    @keyframes skeleton-pulse {\n      0%, 100% { opacity: 1; }\n      50% { opacity: 0.85; }\n    }\n  `;\n  document.head.appendChild(style);\n  \n  // Simulate content loading after a delay\n  setTimeout(() => {\n    // Add loaded class to container\n    container.classList.add('skeleton-loaded');\n  }, 3000);\n}"
    },
    {
        "id": "pulse-loader",
        "title": "Pulse Loader",
        "description": "A pulsing loader animation with three dots, ideal for loading states.",
        "category": "loaders",
        "tags": ["loader", "pulse", "loading"],
        "html": "<div class=\"pulse-loader\">\n  <div class=\"dot\"></div>\n  <div class=\"dot\"></div>\n  <div class=\"dot\"></div>\n</div>",
        "css": ".pulse-loader {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n}\n\n.dot {\n  width: 15px;\n  height: 15px;\n  background-color: #7c4dff;\n  border-radius: 50%;\n  animation: pulse 1.5s ease-in-out infinite;\n}\n\n.dot:nth-child(2) {\n  animation-delay: 0.2s;\n}\n\n.dot:nth-child(3) {\n  animation-delay: 0.4s;\n}\n\n@keyframes pulse {\n  0%, 100% {\n    transform: scale(0.5);\n    opacity: 0.5;\n  }\n  50% {\n    transform: scale(1);\n    opacity: 1;\n  }\n}",
        "js": ""
    },
    {
        "id": "ring-spinner",
        "title": "Elegant Ring Spinner",
        "description": "A smooth rotating ring loader with gradient colors and a professional aesthetic.",
        "category": "loaders",
        "tags": ["loader", "spinner", "ring", "circular"],
        "html": "<div class=\"ring-spinner-container\">\n  <div class=\"ring-spinner\"></div>\n</div>",
        "css": ".ring-spinner-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 150px;\n}\n\n.ring-spinner {\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  position: relative;\n  animation: ring-rotate 2s linear infinite;\n}\n\n.ring-spinner::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  border-radius: 50%;\n  border: 4px solid transparent;\n  border-top-color: #7c4dff;\n  border-bottom-color: #ff4d7c;\n  animation: ring-fade 2s linear infinite;\n}\n\n.ring-spinner::after {\n  content: '';\n  position: absolute;\n  top: 4px;\n  left: 4px;\n  right: 4px;\n  bottom: 4px;\n  border-radius: 50%;\n  border: 4px solid transparent;\n  border-left-color: #4dcaff;\n  border-right-color: #4dff60;\n  animation: ring-fade 1.5s linear infinite reverse;\n}\n\n@keyframes ring-rotate {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes ring-fade {\n  0%, 100% {\n    opacity: 0.8;\n  }\n  50% {\n    opacity: 0.4;\n  }\n}",
        "js": ""
    },
    {
        "id": "progress-bar-loader",
        "title": "Animated Progress Bar",
        "description": "A sophisticated progress bar with a gradient fill and smooth animation, perfect for showing loading progress.",
        "category": "loaders",
        "tags": ["loader", "progress", "bar", "gradient"],
        "html": "<div class=\"progress-bar-container\">\n  <div class=\"progress-bar\">\n    <div class=\"progress-fill\"></div>\n  </div>\n  <div class=\"progress-text\">Loading...</div>\n</div>",
        "css": ".progress-bar-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n  width: 100%;\n  max-width: 300px;\n  margin: 0 auto;\n}\n\n.progress-bar {\n  width: 100%;\n  height: 10px;\n  background-color: #f0f0f0;\n  border-radius: 10px;\n  overflow: hidden;\n  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2);\n  position: relative;\n}\n\n.progress-fill {\n  height: 100%;\n  background: linear-gradient(90deg, #7c4dff, #ff4d7c, #4dcaff, #4dff60);\n  background-size: 300% 100%;\n  animation: progress-animation 2s linear infinite, gradient-shift 4s linear infinite;\n  border-radius: 10px;\n  transition: width 0.5s ease;\n  width: 0;\n}\n\n.progress-text {\n  font-size: 1rem;\n  font-weight: 600;\n  color: #444;\n  letter-spacing: 0.05em;\n}\n\n@keyframes progress-animation {\n  0% {\n    width: 0%;\n  }\n  50% {\n    width: 80%;\n  }\n  100% {\n    width: 100%;\n  }\n}\n\n@keyframes gradient-shift {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}",
        "js": ""
    },
    {
        "id": "cube-folding-loader",
        "title": "Cube Folding Animation",
        "description": "A mesmerizing 3D cube that appears to fold and unfold, creating an engaging loading experience.",
        "category": "loaders",
        "tags": ["loader", "cube", "3d", "folding"],
        "html": "<div class=\"folding-cube-container\">\n  <div class=\"folding-cube\">\n    <div class=\"cube-1 cube\"></div>\n    <div class=\"cube-2 cube\"></div>\n    <div class=\"cube-4 cube\"></div>\n    <div class=\"cube-3 cube\"></div>\n  </div>\n</div>",
        "css": ".folding-cube-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 150px;\n}\n\n.folding-cube {\n  width: 60px;\n  height: 60px;\n  position: relative;\n  transform: rotateZ(45deg);\n}\n\n.cube {\n  float: left;\n  width: 50%;\n  height: 50%;\n  position: relative;\n  transform: scale(1.1);\n}\n\n.cube:before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: #7c4dff;\n  animation: fold 2.4s infinite linear both;\n  transform-origin: 100% 100%;\n}\n\n.cube-2 {\n  transform: scale(1.1) rotateZ(90deg);\n}\n\n.cube-3 {\n  transform: scale(1.1) rotateZ(270deg);\n}\n\n.cube-4 {\n  transform: scale(1.1) rotateZ(180deg);\n}\n\n.cube-2:before {\n  animation-delay: 0.3s;\n  background-color: rgba(124, 77, 255, 0.8);\n}\n\n.cube-3:before {\n  animation-delay: 0.9s;\n  background-color: rgba(124, 77, 255, 0.6);\n}\n\n.cube-4:before {\n  animation-delay: 0.6s;\n  background-color: rgba(124, 77, 255, 0.4);\n}\n\n@keyframes fold {\n  0%, 10% {\n    transform: perspective(140px) rotateX(-180deg);\n    opacity: 0;\n  }\n  25%, 75% {\n    transform: perspective(140px) rotateX(0deg);\n    opacity: 1;\n  }\n  90%, 100% {\n    transform: perspective(140px) rotateY(180deg);\n    opacity: 0;\n  }\n}",
        "js": ""
    },
    {
        "id": "circular-progress-loader",
        "title": "Circular Progress Loader",
        "description": "A circular progress indicator with percentage display, perfect for showing loading progress in a compact format.",
        "category": "loaders",
        "tags": ["loader", "circular", "progress", "percentage"],
        "html": "<div class=\"circular-progress-container\">\n  <div class=\"circular-progress\">\n    <div class=\"inner-circle\"></div>\n    <div class=\"percentage\">0%</div>\n  </div>\n</div>",
        "css": ".circular-progress-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 150px;\n}\n\n.circular-progress {\n  width: 100px;\n  height: 100px;\n  border-radius: 50%;\n  background: conic-gradient(#7c4dff 0%, #f0f0f0 0%);\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.inner-circle {\n  width: 80px;\n  height: 80px;\n  border-radius: 50%;\n  background-color: white;\n  position: absolute;\n}\n\n.percentage {\n  position: relative;\n  z-index: 1;\n  font-size: 1.5rem;\n  font-weight: 700;\n  color: #333;\n}",
        "js": "function initCircularProgress() {\n  const progress = document.querySelector('.circular-progress');\n  const percentageDiv = document.querySelector('.percentage');\n  \n  if (!progress || !percentageDiv) return;\n  \n  let percentage = 0;\n  const interval = setInterval(() => {\n    percentage += 1;\n    \n    if (percentage > 100) {\n      percentage = 0;\n      percentageDiv.textContent = '0%';\n      progress.style.background = `conic-gradient(#7c4dff 0%, #f0f0f0 0%)`;\n      return;\n    }\n    \n    // Update the percentage text\n    percentageDiv.textContent = `${percentage}%`;\n    \n    // Update the conic gradient\n    progress.style.background = `conic-gradient(#7c4dff ${percentage}%, #f0f0f0 0%)`;\n  }, 50); // Adjust speed of progress here\n  \n  // Clean up interval if needed\n  setTimeout(() => {\n    clearInterval(interval);\n  }, 15000); // Stop after 15 seconds to prevent memory leaks in preview\n}\n\ninitCircularProgress();"
    },
    {
        "id": "dna-helix-loader",
        "title": "DNA Helix Loader",
        "description": "A scientifically inspired DNA double helix animation with particles rotating in a mesmerizing pattern.",
        "category": "loaders",
        "tags": ["loader", "dna", "helix", "scientific", "particles"],
        "html": "<div class=\"dna-loader-container\">\n  <div class=\"dna-loader\">\n    <div class=\"dna-strand\"></div>\n  </div>\n</div>",
        "css": ".dna-loader-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 200px;\n  background: linear-gradient(135deg, #121212 0%, #1e1e2e 100%);\n  border-radius: 12px;\n}\n\n.dna-loader {\n  position: relative;\n  width: 40px;\n  height: 160px;\n  perspective: 800px;\n}\n\n.dna-strand {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  transform-style: preserve-3d;\n  animation: rotate 3s linear infinite;\n}\n\n@keyframes rotate {\n  0% {\n    transform: rotateY(0deg);\n  }\n  100% {\n    transform: rotateY(360deg);\n  }\n}\n\n/* Generate DNA particles */\n.dna-particle {\n  position: absolute;\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  left: 50%;\n  transform-style: preserve-3d;\n  transform: translate(-50%, -50%) translateZ(0);\n  backface-visibility: hidden;\n}\n\n/* Create the backbone lines */\n.dna-backbone-left, \n.dna-backbone-right {\n  position: absolute;\n  width: 2px;\n  height: 170px;\n  top: -5px;\n  left: 50%;\n  transform: translateX(-50%);\n  background: rgba(255, 255, 255, 0.2);\n}\n\n.dna-backbone-left {\n  transform: translateX(-50%) translateZ(20px);\n}\n\n.dna-backbone-right {\n  transform: translateX(-50%) translateZ(-20px);\n}\n\n/* Individual particles color variants */\n.dna-particle:nth-child(4n+1) {\n  background: rgba(124, 77, 255, 0.9); /* Purple */\n  box-shadow: 0 0 10px rgba(124, 77, 255, 0.7);\n}\n\n.dna-particle:nth-child(4n+2) {\n  background: rgba(77, 202, 255, 0.9); /* Blue */\n  box-shadow: 0 0 10px rgba(77, 202, 255, 0.7);\n}\n\n.dna-particle:nth-child(4n+3) {\n  background: rgba(77, 255, 96, 0.9); /* Green */\n  box-shadow: 0 0 10px rgba(77, 255, 96, 0.7);\n}\n\n.dna-particle:nth-child(4n+4) {\n  background: rgba(255, 77, 124, 0.9); /* Red */\n  box-shadow: 0 0 10px rgba(255, 77, 124, 0.7);\n}\n\n/* Create the connector lines */\n.dna-connector {\n  position: absolute;\n  height: 2px;\n  background: rgba(255, 255, 255, 0.3);\n  left: -20px;\n  width: 80px;\n  transform-origin: center;\n  backface-visibility: hidden;\n}\n\n/* Pulse animation for particles */\n@keyframes pulse {\n  0%, 100% {\n    transform: translate(-50%, -50%) translateZ(var(--z)) scale(1);\n    opacity: 1;\n  }\n  50% {\n    transform: translate(-50%, -50%) translateZ(var(--z)) scale(1.2);\n    opacity: 0.8;\n  }\n}",
        "js": "function createDNAHelix() {\n  const strand = document.querySelector('.dna-strand');\n  if (!strand) return;\n  \n  // Create backbones\n  const backboneLeft = document.createElement('div');\n  backboneLeft.className = 'dna-backbone-left';\n  strand.appendChild(backboneLeft);\n  \n  const backboneRight = document.createElement('div');\n  backboneRight.className = 'dna-backbone-right';\n  strand.appendChild(backboneRight);\n  \n  // Create DNA particles and connectors\n  const particleCount = 12;\n  const ySpacing = 150 / (particleCount - 1);\n  \n  for (let i = 0; i < particleCount; i++) {\n    // Calculate y position\n    const y = i * ySpacing + 5;\n    \n    // Create left particle\n    const particleLeft = document.createElement('div');\n    particleLeft.className = 'dna-particle';\n    particleLeft.style.top = `${y}px`;\n    particleLeft.style.setProperty('--z', '20px');\n    particleLeft.style.transform = `translate(-50%, -50%) translateZ(20px)`;\n    particleLeft.style.animation = `pulse 2s infinite ${i * 0.1}s`;\n    strand.appendChild(particleLeft);\n    \n    // Create right particle (offset rotation by 180 degrees)\n    const particleRight = document.createElement('div');\n    particleRight.className = 'dna-particle';\n    particleRight.style.top = `${y}px`;\n    particleRight.style.setProperty('--z', '-20px');\n    particleRight.style.transform = `translate(-50%, -50%) translateZ(-20px)`;\n    particleRight.style.animation = `pulse 2s infinite ${i * 0.1 + 1}s`;\n    strand.appendChild(particleRight);\n    \n    // Create connector (only for pairs where it makes sense in the helix)\n    if (i % 2 === 0) {\n      const connector = document.createElement('div');\n      connector.className = 'dna-connector';\n      connector.style.top = `${y}px`;\n      connector.style.transform = `translateY(-50%) rotateY(${i * 30}deg)`;\n      strand.appendChild(connector);\n    }\n  }\n  \n  // Add subtle wobble animation\n  let angle = 0;\n  function wobble() {\n    angle += 0.01;\n    const wobbleX = Math.sin(angle) * 5;\n    const wobbleY = Math.cos(angle) * 3;\n    \n    strand.style.transform = `rotateY(${angle * 57.3}deg) translateX(${wobbleX}px) translateY(${wobbleY}px)`;\n    \n    requestAnimationFrame(wobble);\n  }\n  \n  wobble();\n}\n\n// Initialize the DNA Helix loader\ncreateDNAHelix();"
    }
] 