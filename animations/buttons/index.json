[
    {
        "id": "enterprise-action-button",
        "title": "Enterprise Action Button",
        "description": "Professional enterprise-style button with subtle animations and clean design for corporate websites.",
        "category": "buttons",
        "tags": ["button", "professional", "enterprise", "corporate"],
        "html": "<div class=\"enterprise-btn-container\">\n  <button class=\"enterprise-button\">\n    <span class=\"enterprise-button-background\"></span>\n    <span class=\"enterprise-button-text\">Get Started</span>\n    <span class=\"enterprise-button-icon\">\n      <svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\">\n        <path d=\"M5 12h14M12 5l7 7-7 7\"></path>\n      </svg>\n    </span>\n  </button>\n</div>",
        "css": ".enterprise-btn-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 2rem;\n}\n\n.enterprise-button {\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0 24px;\n  height: 54px;\n  border: none;\n  background: transparent;\n  cursor: pointer;\n  overflow: hidden;\n  border-radius: 4px;\n  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.08);\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.enterprise-button-background {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(to right, #0062cc, #0078d4);\n  transition: all 0.3s ease;\n  z-index: 1;\n}\n\n.enterprise-button-text {\n  position: relative;\n  font-family: 'Inter', sans-serif;\n  font-size: 16px;\n  font-weight: 500;\n  letter-spacing: 0.3px;\n  color: white;\n  margin-right: 8px;\n  z-index: 2;\n  transition: transform 0.3s ease;\n}\n\n.enterprise-button-icon {\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  z-index: 2;\n  transition: transform 0.3s ease, opacity 0.3s ease;\n  opacity: 0.8;\n}\n\n.enterprise-button:hover {\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);\n  transform: translateY(-2px);\n}\n\n.enterprise-button:hover .enterprise-button-background {\n  background: linear-gradient(to right, #0057b8, #0078d4);\n}\n\n.enterprise-button:hover .enterprise-button-text {\n  transform: translateX(-4px);\n}\n\n.enterprise-button:hover .enterprise-button-icon {\n  transform: translateX(4px);\n  opacity: 1;\n}\n\n.enterprise-button:active {\n  transform: translateY(0);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.enterprise-button::after {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 120%;\n  height: 120%;\n  background: rgba(255, 255, 255, 0.15);\n  transform: translate(-50%, -50%) scale(0);\n  border-radius: 50%;\n  z-index: 1;\n  opacity: 0;\n  transition: transform 0.5s ease, opacity 0.5s ease;\n}\n\n.enterprise-button:active::after {\n  transform: translate(-50%, -50%) scale(1);\n  opacity: 1;\n  transition: 0s;\n}",
        "js": "const button = this.querySelector('.enterprise-button');\n\nif (button) {\n  button.addEventListener('mousedown', function(e) {\n    // Create ripple effect on click\n    const rect = button.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    const circle = document.createElement('span');\n    circle.classList.add('ripple-effect');\n    circle.style.top = `${y}px`;\n    circle.style.left = `${x}px`;\n    \n    button.appendChild(circle);\n    \n    setTimeout(() => {\n      circle.remove();\n    }, 600);\n  });\n  \n  // Add subtle hover animation\n  button.addEventListener('mousemove', function(e) {\n    const rect = button.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const relativeX = x / rect.width;\n    \n    // Subtle background gradient shift\n    const background = button.querySelector('.enterprise-button-background');\n    if (background) {\n      background.style.backgroundPosition = `${relativeX * 100}% 50%`;\n    }\n  });\n  \n  // Reset on mouse leave\n  button.addEventListener('mouseleave', function() {\n    const background = button.querySelector('.enterprise-button-background');\n    if (background) {\n      background.style.backgroundPosition = '';\n    }\n  });\n}"
    },
    {
        "id": "minimal-outline-button",
        "title": "Minimal Outline Button",
        "description": "Clean, minimal outline button with professional hover effects for modern business websites.",
        "category": "buttons",
        "tags": ["button", "minimal", "outline", "professional"],
        "html": "<div class=\"minimal-btn-container\">\n  <button class=\"minimal-outline-button\">\n    <span class=\"minimal-btn-label\">Learn More</span>\n    <span class=\"minimal-btn-border\"></span>\n  </button>\n</div>",
        "css": ".minimal-btn-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 2rem;\n}\n\n.minimal-outline-button {\n  position: relative;\n  font-family: 'Inter', sans-serif;\n  font-size: 15px;\n  font-weight: 500;\n  letter-spacing: 0.5px;\n  color: #333;\n  background: transparent;\n  border: none;\n  padding: 14px 32px;\n  cursor: pointer;\n  overflow: hidden;\n  transition: color 0.3s ease;\n}\n\n.minimal-btn-label {\n  position: relative;\n  z-index: 2;\n  transition: transform 0.3s ease;\n}\n\n.minimal-btn-border {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n}\n\n.minimal-btn-border::before,\n.minimal-btn-border::after {\n  content: '';\n  position: absolute;\n  border: 1px solid #333;\n  transition: transform 0.4s cubic-bezier(0.23, 1, 0.32, 1);\n}\n\n.minimal-btn-border::before {\n  right: 0;\n  bottom: 0;\n  left: 0;\n  top: 0;\n  border-top: none;\n  border-bottom: none;\n  transform: scaleX(0);\n  transform-origin: right;\n}\n\n.minimal-btn-border::after {\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  border-left: none;\n  border-right: none;\n  transform: scaleY(0);\n  transform-origin: bottom;\n}\n\n.minimal-outline-button:hover .minimal-btn-border::before {\n  transform: scaleX(1);\n  transform-origin: left;\n}\n\n.minimal-outline-button:hover .minimal-btn-border::after {\n  transform: scaleY(1);\n  transform-origin: top;\n  transition-delay: 0.15s;\n}\n\n.minimal-outline-button:hover .minimal-btn-label {\n  transform: translateY(-2px);\n  color: #1a1a1a;\n}\n\n.minimal-outline-button::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.03);\n  transform: scaleX(0);\n  transform-origin: right;\n  transition: transform 0.4s cubic-bezier(0.23, 1, 0.32, 1);\n  z-index: 0;\n}\n\n.minimal-outline-button:hover::before {\n  transform: scaleX(1);\n  transform-origin: left;\n}",
        "js": "const button = this.querySelector('.minimal-outline-button');\n\nif (button) {\n  // Add enter animation\n  button.style.opacity = '0';\n  button.style.transform = 'translateY(10px)';\n  button.style.transition = 'opacity 0.5s ease, transform 0.5s ease';\n  \n  setTimeout(() => {\n    button.style.opacity = '1';\n    button.style.transform = 'translateY(0)';\n  }, 200);\n  \n  // Add hover animation\n  button.addEventListener('mousemove', function(e) {\n    const rect = button.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    // Calculate distance from center\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    const deltaX = (x - centerX) / centerX; // -1 to 1\n    const deltaY = (y - centerY) / centerY; // -1 to 1\n    \n    // Subtle tilt effect\n    const tiltAmount = 1.5; // degrees\n    button.style.transform = `perspective(500px) rotateX(${-deltaY * tiltAmount}deg) rotateY(${deltaX * tiltAmount}deg)`;\n  });\n  \n  // Reset on mouse leave\n  button.addEventListener('mouseleave', function() {\n    button.style.transform = 'perspective(500px) rotateX(0deg) rotateY(0deg)';\n  });\n}"
    },
    {
        "id": "neon-button",
        "title": "Neon Button Effect",
        "description": "A vibrant neon effect for buttons with a glowing outline and text shadow.",
        "category": "buttons",
        "tags": ["button", "neon", "glow"],
        "html": "<button class=\"neon-button\">NEON BUTTON</button>",
        "css": ".neon-button {\n  background: none;\n  border: 3px solid #fff;\n  border-radius: 5px;\n  color: #fff;\n  text-transform: uppercase;\n  font-weight: bold;\n  font-size: 1.2rem;\n  padding: 1rem 2rem;\n  cursor: pointer;\n  position: relative;\n  z-index: 1;\n  text-shadow: 0 0 5px #00ffff, 0 0 10px #00ffff, 0 0 15px #00ffff;\n  box-shadow: 0 0 5px #00ffff, 0 0 10px #00ffff, 0 0 20px #00ffff;\n  transition: all 0.3s ease;\n}\n\n.neon-button:hover {\n  background-color: #00ffff;\n  text-shadow: 0 0 5px #000, 0 0 10px #000;\n  color: #000;\n}\n\n.neon-button::before {\n  content: '';\n  position: absolute;\n  z-index: -1;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 255, 255, 0.1);\n  transform: scaleX(0);\n  transform-origin: 0 50%;\n  transition: transform 0.5s ease-out;\n}\n\n.neon-button:hover::before {\n  transform: scaleX(1);\n}",
        "js": ""
    },
    {
        "id": "liquid-button",
        "title": "Liquid Button Effect",
        "description": "A mesmerizing liquid-like animation that ripples when the button is clicked, creating a water drop effect.",
        "category": "buttons",
        "tags": ["button", "liquid", "ripple", "click"],
        "html": "<button class=\"liquid-button\">\n  <span>Click Me</span>\n  <div class=\"liquid\"></div>\n</button>",
        "css": ".liquid-button {\n  position: relative;\n  padding: 1.2rem 2.5rem;\n  text-align: center;\n  font-size: 1.2rem;\n  font-weight: 600;\n  color: white;\n  background-color: #4dcaff;\n  border: none;\n  border-radius: 50px;\n  cursor: pointer;\n  overflow: hidden;\n  box-shadow: 0 6px 20px rgba(77, 202, 255, 0.4);\n  transition: transform 0.3s ease;\n}\n\n.liquid-button:hover {\n  transform: translateY(-3px);\n}\n\n.liquid-button:active {\n  transform: translateY(0);\n}\n\n.liquid-button span {\n  position: relative;\n  z-index: 1;\n}\n\n.liquid {\n  position: absolute;\n  top: -80px;\n  left: 0;\n  width: 200px;\n  height: 200px;\n  background-color: #2a93c9;\n  border-radius: 45%;\n  transform: translateX(-20%) translateY(0);\n  transition: transform 0.5s ease;\n  opacity: 0.8;\n}\n\n.liquid-button.animate .liquid {\n  animation: liquid-animation 0.8s ease-out;\n}\n\n@keyframes liquid-animation {\n  0% {\n    transform: translateX(-20%) translateY(0) scale(0.3);\n  }\n  40% {\n    transform: translateX(-20%) translateY(50%) scale(0.6);\n  }\n  70% {\n    transform: translateX(-20%) translateY(80%) scale(0.9);\n    opacity: 0.8;\n  }\n  100% {\n    transform: translateX(-20%) translateY(100%) scale(1.5);\n    opacity: 0;\n  }\n}",
        "js": "function initLiquidButton() {\n  const button = document.querySelector('.liquid-button');\n  \n  if (!button) return;\n  \n  button.addEventListener('click', function() {\n    // Remove any existing animation class\n    button.classList.remove('animate');\n    \n    // Trigger reflow to restart animation\n    void button.offsetWidth;\n    \n    // Add animation class\n    button.classList.add('animate');\n  });\n}\n\ninitLiquidButton();"
    },
    {
        "id": "border-gradient-button",
        "title": "Border Gradient Button",
        "description": "An elegant button with animated gradient borders that shift colors on hover.",
        "category": "buttons",
        "tags": ["button", "gradient", "border", "modern"],
        "html": "<button class=\"gradient-border-button\">Hover Me</button>",
        "css": ".gradient-border-button {\n  position: relative;\n  padding: 1rem 2.5rem;\n  font-size: 1.1rem;\n  font-weight: 600;\n  background: #222;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  z-index: 1;\n  overflow: hidden;\n  transition: color 0.3s ease;\n}\n\n.gradient-border-button::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  border-radius: 8px;\n  border: 2px solid transparent;\n  background: linear-gradient(45deg, #7c4dff, #00bcd4, #ff4081) border-box;\n  -webkit-mask: linear-gradient(#fff 0 0) padding-box, linear-gradient(#fff 0 0);\n  -webkit-mask-composite: destination-out;\n  mask-composite: exclude;\n  transition: all 0.5s ease;\n}\n\n.gradient-border-button::after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(45deg, #7c4dff, #00bcd4, #ff4081);\n  border-radius: 8px;\n  z-index: -1;\n  opacity: 0;\n  transition: opacity 0.5s ease;\n}\n\n.gradient-border-button:hover::before {\n  background: linear-gradient(225deg, #7c4dff, #00bcd4, #ff4081) border-box;\n}\n\n.gradient-border-button:hover::after {\n  opacity: 0.15;\n}\n\n.gradient-border-button:active {\n  transform: translateY(1px);\n}",
        "js": ""
    },
    {
        "id": "3d-layered-button",
        "title": "3D Layered Button",
        "description": "A button with a realistic 3D layered effect that creates depth when pressed, simulating a physical button press.",
        "category": "buttons",
        "tags": ["button", "3d", "layered", "press"],
        "html": "<button class=\"layered-button\">Press Me</button>",
        "css": ".layered-button {\n  position: relative;\n  width: 200px;\n  height: 60px;\n  background: #7c4dff;\n  border: none;\n  border-radius: 10px;\n  color: white;\n  font-size: 1.1rem;\n  font-weight: 700;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  cursor: pointer;\n  transition: all 0.15s ease;\n  transform-style: preserve-3d;\n  transform: perspective(600px) translateZ(0);\n  box-shadow: 0 10px 0 #5e35dc, 0 15px 20px rgba(0, 0, 0, 0.25);\n}\n\n.layered-button::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(rgba(255, 255, 255, 0.2), transparent);\n  border-radius: 10px 10px 0 0;\n  height: 50%;\n  pointer-events: none;\n}\n\n.layered-button:hover {\n  transform: perspective(600px) translateZ(10px) translateY(-5px);\n  box-shadow: 0 15px 0 #5e35dc, 0 25px 25px rgba(0, 0, 0, 0.2);\n}\n\n.layered-button:active {\n  transform: perspective(600px) translateZ(-5px) translateY(8px);\n  box-shadow: 0 2px 0 #5e35dc, 0 5px 10px rgba(0, 0, 0, 0.3);\n  background: #6c33ff;\n}\n\n.layered-button::after {\n  content: '';\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: -10px;\n  height: 10px;\n  background: #5e35dc;\n  border-radius: 0 0 10px 10px;\n  transform-origin: top;\n  transform: rotateX(-90deg);\n  pointer-events: none;\n}",
        "js": ""
    },
    {
        "id": "magnetic-particles-button",
        "title": "Magnetic Particles Button",
        "description": "A dynamic button with interactive particle effects that magnetically attract to the cursor, creating an engaging visual experience.",
        "category": "buttons",
        "tags": ["button", "particles", "magnetic", "interactive", "hover"],
        "html": "<div class=\"particle-button-container\">\n  <button class=\"particle-button\">\n    <span>Hover Me</span>\n    <div class=\"particles\"></div>\n  </button>\n</div>",
        "css": ".particle-button-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 250px;\n  border-radius: 12px;\n  overflow: hidden;\n}\n\n.particle-button {\n  position: relative;\n  padding: 15px 30px;\n  font-size: 1.2rem;\n  font-weight: 600;\n  color: white;\n  background: #7c4dff;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  overflow: hidden;\n  z-index: 1;\n  transition: transform 0.3s ease, box-shadow 0.3s ease, background-color 0.3s ease;\n  box-shadow: 0 5px 20px rgba(124, 77, 255, 0.4);\n}\n\n.particle-button:hover {\n  transform: translateY(-3px);\n  box-shadow: 0 10px 30px rgba(124, 77, 255, 0.6);\n  background-color: #6536db;\n}\n\n.particle-button span {\n  position: relative;\n  z-index: 2;\n}\n\n.particles {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n}\n\n.particle {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 6px;\n  height: 6px;\n  background-color: rgba(255, 255, 255, 0.8);\n  border-radius: 50%;\n  transition: transform 0.3s ease;\n  opacity: 0;\n  z-index: 1;\n}\n\n.particle-button:hover .particle {\n  opacity: 1;\n  animation: particle-glow 1.5s infinite alternate;\n}\n\n@keyframes particle-glow {\n  0% {\n    box-shadow: 0 0 2px rgba(255, 255, 255, 0.5);\n  }\n  100% {\n    box-shadow: 0 0 10px rgba(255, 255, 255, 0.8), 0 0 20px rgba(124, 77, 255, 0.4);\n  }\n}\n\n/* Pulse effect for the button on hover */\n.particle-button::after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(255, 255, 255, 0.1);\n  z-index: 0;\n  border-radius: 8px;\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.particle-button:hover::after {\n  opacity: 1;\n  animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n  0% {\n    transform: scale(1);\n    opacity: 0.8;\n  }\n  50% {\n    transform: scale(1.05);\n    opacity: 0.5;\n  }\n  100% {\n    transform: scale(1);\n    opacity: 0.8;\n  }\n}",
        "js": "function initMagneticParticlesButton() {\n  const container = document.querySelector('.particle-button-container');\n  const button = document.querySelector('.particle-button');\n  const particlesContainer = document.querySelector('.particles');\n  \n  if (!container || !button || !particlesContainer) return;\n  \n  // Create particles\n  const particleCount = 30;\n  const particles = [];\n  \n  for (let i = 0; i < particleCount; i++) {\n    const particle = document.createElement('div');\n    particle.className = 'particle';\n    \n    // Random size between 3px and 8px\n    const size = 3 + Math.random() * 5;\n    particle.style.width = `${size}px`;\n    particle.style.height = `${size}px`;\n    \n    // Random initial position around the button\n    const angle = Math.random() * Math.PI * 2;\n    const distance = 30 + Math.random() * 70;\n    const x = Math.cos(angle) * distance;\n    const y = Math.sin(angle) * distance;\n    \n    particle.style.transform = `translate(${x}px, ${y}px)`;\n    \n    // Save the initial position for animation\n    particle.dataset.initialX = x;\n    particle.dataset.initialY = y;\n    \n    // Random delay for staggered appearance\n    particle.style.transitionDelay = `${Math.random() * 0.2}s`;\n    \n    particlesContainer.appendChild(particle);\n    particles.push(particle);\n  }\n  \n  // Handle mouse movement for magnetic effect\n  container.addEventListener('mousemove', (e) => {\n    const rect = button.getBoundingClientRect();\n    const buttonCenterX = rect.left + rect.width / 2;\n    const buttonCenterY = rect.top + rect.height / 2;\n    \n    // Make particles respond to cursor position\n    particles.forEach(particle => {\n      const initialX = parseFloat(particle.dataset.initialX);\n      const initialY = parseFloat(particle.dataset.initialY);\n      \n      // Calculate the mouse position relative to the button center\n      const mouseX = e.clientX - buttonCenterX;\n      const mouseY = e.clientY - buttonCenterY;\n      \n      // Calculate distance from mouse to particle\n      const distanceX = mouseX - initialX;\n      const distanceY = mouseY - initialY;\n      const distance = Math.sqrt(distanceX * distanceX + distanceY * distanceY);\n      \n      // Apply magnetic effect if mouse is near\n      const maxDistance = 150;\n      if (distance < maxDistance) {\n        // Calculate attraction force (stronger when closer)\n        const force = (1 - distance / maxDistance) * 0.5;\n        \n        // Calculate new position with attraction\n        const attractX = initialX + distanceX * force;\n        const attractY = initialY + distanceY * force;\n        \n        // Apply the new position\n        particle.style.transform = `translate(${attractX}px, ${attractY}px)`;\n      } else {\n        // Return to initial position\n        particle.style.transform = `translate(${initialX}px, ${initialY}px)`;\n      }\n    });\n  });\n  \n  // Reset particles when mouse leaves\n  container.addEventListener('mouseleave', () => {\n    particles.forEach(particle => {\n      const initialX = parseFloat(particle.dataset.initialX);\n      const initialY = parseFloat(particle.dataset.initialY);\n      particle.style.transform = `translate(${initialX}px, ${initialY}px)`;\n    });\n  });\n  \n  // Add click effect\n  button.addEventListener('click', () => {\n    // Create an explosion effect\n    particles.forEach(particle => {\n      // Get current position\n      const style = window.getComputedStyle(particle);\n      const matrix = new WebKitCSSMatrix(style.transform);\n      const currentX = matrix.m41;\n      const currentY = matrix.m42;\n      \n      // Calculate explosion direction (outward from center)\n      const angle = Math.atan2(currentY, currentX);\n      const distance = 100 + Math.random() * 50;\n      const explosionX = Math.cos(angle) * distance;\n      const explosionY = Math.sin(angle) * distance;\n      \n      // Apply explosion with CSS animation\n      particle.style.transition = 'transform 0.5s cubic-bezier(0.1, 0.8, 0.3, 1)';\n      particle.style.transform = `translate(${explosionX}px, ${explosionY}px) scale(0.5)`;\n      \n      // Return particles to original position after explosion\n      setTimeout(() => {\n        particle.style.transition = 'transform 1s cubic-bezier(0.5, 0, 0.5, 1)';\n        const initialX = parseFloat(particle.dataset.initialX);\n        const initialY = parseFloat(particle.dataset.initialY);\n        particle.style.transform = `translate(${initialX}px, ${initialY}px)`;\n      }, 500);\n    });\n  });\n}\n\n// Initialize the magnetic particles button\ninitMagneticParticlesButton();"
    }
] 